version: '3.8'

services:
  # Milvus 向量数据库
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.18
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ./volumes/etcd:/etcd
    command: etcd -advertise-client-urls=http://etcd:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - milvus-network

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2024-05-28T17-19-04Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - ./volumes/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - milvus-network

  milvus:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.6.0
    command: ["milvus", "run", "standalone"]
    security_opt:
      - seccomp:unconfined
    environment:
      MINIO_REGION: us-east-1
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - ./volumes/milvus:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "etcd"
      - "minio"
    networks:
      - milvus-network

  # Ollama 服务
  ollama:
    container_name: perspective-kb-ollama
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ./volumes/ollama:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    networks:
      - milvus-network
    restart: unless-stopped

  # 视角知识库应用
  perspective-kb:
    container_name: perspective-kb-app
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      # 数据库配置（使用Milvus Server）
      - PKB_MILVUS_USE_SERVER=true
      - PKB_MILVUS_HOST=milvus
      - PKB_MILVUS_PORT=19530
      
      # Ollama配置
      - PKB_OLLAMA_HOST=http://ollama:11434
      - PKB_EMBEDDING_MODEL=mitoza/Qwen3-Embedding-0.6B:latest
      
      # 向量配置
      - PKB_VECTOR_DIM=1024
      - PKB_SIMILARITY_METRIC=COSINE
      
      # 性能配置（Windows优化）
      - PKB_BATCH_SIZE=100
      - PKB_MAX_WORKERS=4
      - PKB_TOP_K=5
      
      # 日志配置
      - PKB_LOG_LEVEL=INFO
      - PKB_LOG_FORMAT=json
      
      # 缓存配置
      - PKB_ENABLE_EMBEDDING_CACHE=true
      
      # 网络配置
      - NO_PROXY=localhost,127.0.0.1,::1,milvus,ollama,etcd,minio
      - no_proxy=localhost,127.0.0.1,::1,milvus,ollama,etcd,minio
    volumes:
      - ./data:/app/data:ro          # 只读数据目录
      - ./log:/app/log               # 日志目录
      - ./volumes/perspective_kb:/app/volumes  # 应用数据目录
    ports:
      - "8000:8000"
    depends_on:
      - milvus
      - ollama
    networks:
      - milvus-network
    restart: unless-stopped
    command: >
      sh -c "
        echo '🚀 启动视角知识库系统（Windows生产模式）...' &&
        echo '等待Milvus服务启动...' &&
        sleep 60 &&
        echo '等待Ollama服务启动...' &&
        sleep 30 &&
        echo '拉取嵌入模型...' &&
        curl -X POST http://ollama:11434/api/pull -d '{\"name\":\"mitoza/Qwen3-Embedding-0.6B:latest\"}' || echo '模型拉取失败，继续启动...' &&
        echo '开始数据处理...' &&
        python -m perspective_kb.cli process --force &&
        echo '启动应用服务...' &&
        python -m perspective_kb.cli status
      "

networks:
  milvus-network:
    driver: bridge

volumes:
  etcd:
  minio:
  milvus:
  ollama:
  perspective_kb:
